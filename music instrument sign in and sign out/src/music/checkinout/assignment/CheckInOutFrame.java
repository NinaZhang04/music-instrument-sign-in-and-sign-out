
/*
 * Author: Core Inc (Kyle, Helen, Nina)
 * Class: ICS4U
 * Program: Check in/out frame
 * Description: Frame to check in and out instruments
 */
package music.checkinout.assignment;

import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 *
 * @author Nina
 */
public class CheckInOutFrame extends javax.swing.JFrame {

    /**
     * Creates new form CheckInOutFrame
     */
    public CheckInOutFrame() {
        initComponents();
        setTitle("Music Instrument Check In/Chect Out Student Page");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        checkInButton = new javax.swing.JButton();
        checkOutButton = new javax.swing.JButton();
        teachLoginButton = new javax.swing.JButton();
        statusMessage = new javax.swing.JLabel();
        equipmentIDField = new javax.swing.JTextField();
        studentID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        missingFileMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Check-in / Check-out");

        jPanel1.setBackground(new java.awt.Color(18, 69, 89));

        jPanel2.setBackground(new java.awt.Color(239, 246, 224));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 50)); // NOI18N
        jLabel1.setText("Student");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel2.setText("Equipment ID:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel3.setText("Student ID:");

        checkInButton.setBackground(new java.awt.Color(18, 69, 89));
        checkInButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        checkInButton.setForeground(new java.awt.Color(255, 255, 255));
        checkInButton.setText("Check-In");
        checkInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkInButtonActionPerformed(evt);
            }
        });

        checkOutButton.setBackground(new java.awt.Color(18, 69, 89));
        checkOutButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        checkOutButton.setForeground(new java.awt.Color(255, 255, 255));
        checkOutButton.setText("Check-Out");
        checkOutButton.setPreferredSize(new java.awt.Dimension(233, 85));
        checkOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutButtonActionPerformed(evt);
            }
        });

        teachLoginButton.setBackground(new java.awt.Color(18, 69, 89));
        teachLoginButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        teachLoginButton.setForeground(new java.awt.Color(255, 255, 255));
        teachLoginButton.setText("Teacher Login");
        teachLoginButton.setPreferredSize(new java.awt.Dimension(233, 85));
        teachLoginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teachLoginButtonActionPerformed(evt);
            }
        });

        statusMessage.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        statusMessage.setText(" ");

        equipmentIDField.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N

        studentID.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("Status:");

        missingFileMessage.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        missingFileMessage.setForeground(new java.awt.Color(250, 0, 0));
        missingFileMessage.setText(" ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(jLabel1))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(198, 198, 198)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(equipmentIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(studentID, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(445, 445, 445)
                                .addComponent(checkInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(109, 109, 109)
                                .addComponent(checkOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(342, 342, 342)
                        .addComponent(teachLoginButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(319, 319, 319)
                                    .addComponent(jLabel4))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jLabel2)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(statusMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 858, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addGap(319, 319, 319)
                            .addComponent(missingFileMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 950, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(164, 164, 164))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel1)
                .addGap(171, 171, 171)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(equipmentIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(50, 50, 50)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentID, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(38, 38, 38)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkInButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkOutButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(statusMessage))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(missingFileMessage)
                        .addGap(175, 175, 175))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(teachLoginButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(105, 105, 105))))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(50, 50, 50))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 880, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(150, 150, 150))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkInButtonActionPerformed
        //Create an empty instrument list
        Instrument[] instrumentList = null;
        //if the student did not enter an instrument ID
        if(equipmentIDField.getText().equals("")){
            statusMessage.setForeground(Color.RED);
            statusMessage.setText("please enter the ID of the item that you wish to check out");
        }
        //when student actually enters something in the instrument ID field 
        else{
            //use the check in method if input is able to be converted into integer
            try{
                instrumentList = checkIn(Integer.parseInt(equipmentIDField.getText()));
            }
            //if the input is not integers, print error messages
            catch(NumberFormatException ex){
                statusMessage.setForeground(Color.RED);
                statusMessage.setText("please enter valid number input");
                return;
            }
            //after done checking in, write everything into file
            Utilities.writeInstrumentFile(instrumentList,statusMessage);
        }
    }//GEN-LAST:event_checkInButtonActionPerformed

    private void checkOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutButtonActionPerformed
        Instrument[] instrumentList = null;
        //if the student is missing information in one of the fields
        if(equipmentIDField.getText().equals("") || studentID.getText().equals("")){
            //prompt them to fill out both fields
            statusMessage.setForeground(Color.RED);
            statusMessage.setText("please fill out both fields for check out");
        }
        //if student filled out all the fields
        else{
            //use the check in method if input is able to be converted into integer
            try{
                instrumentList = checkOut(Integer.parseInt(equipmentIDField.getText()),Integer.parseInt(studentID.getText()));
            }
            //if the input is not integers, print error messages
            catch(NumberFormatException ex){
                statusMessage.setForeground(Color.RED);
                statusMessage.setText("please enter valid number input");
                return;
            }
            //after done checking out, write everything into file
            Utilities.writeInstrumentFile(instrumentList,statusMessage);
        }
    }//GEN-LAST:event_checkOutButtonActionPerformed

    private void teachLoginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teachLoginButtonActionPerformed
            java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TeacherLoginFrame().setVisible(true);
            }
        });
        this.setVisible(false);    
    }//GEN-LAST:event_teachLoginButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckInOutFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckInOutFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckInOutFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckInOutFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckInOutFrame().setVisible(true);
            }
        });
    }



    
    //reminder of status for instrument: true is checked out, in is false
    
    /**
     * Check in the instrument, if check in success, record a line on the history in this form: false, name, instrumentID, studentID, checked in date (with the status of instrument changed)
     * @param instrumentID the ID of the instrument that student wants to check in
     */
    public Instrument[] checkIn(int instrumentID){
        //load everything in the file into an instrument list containing instrument objects
        Instrument instrumentList[] = Utilities.loadInstrumentFile(missingFileMessage);
        //go through the list
        for(int i = 0; i< instrumentList.length;i++){
            //if the ID of the instrument is same as the input ID
            if(instrumentList[i].getNumber() == instrumentID){
                //when the instrument is currently "checked out" status
                if(instrumentList[i].getStatus()){
                    //check in
                    //change instrument to checked in status
                    instrumentList[i].setStatus(false);
                    
                    //get the date(system time), change the date
                    SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");  
                    Date date = new Date();  
                    instrumentList[i].setDate(formatter.format(date));
                    
                    //record this into the history file
                    Utilities.writeToHistory(instrumentList[i].toString());
                    
                    //prints out success message
                    missingFileMessage.setText(" ");
                    statusMessage.setForeground(Color.GREEN);
                    statusMessage.setText("Sucessfully checked in: " + instrumentList[i].getName());
                    
                    //return the list when finds the matching instrument and chekcs it out
                    return instrumentList;
                }
                
                //when the instrument is currently "checked in" status
                else{
                    //tell the student that they already checked in.
                    statusMessage.setForeground(Color.RED);
                    statusMessage.setText("Item is already checked in.");
                    missingFileMessage.setText(" ");
                    //return because nothing is checked in
                    return instrumentList;
                }              
            }
        }
        //if goes out of the loop, it means no instrument with matching ID is found, then print prompt
        statusMessage.setForeground(Color.RED);
        statusMessage.setText("No instrument with this ID exists");
        return instrumentList;
    }
    
    /**
     * Check out the instrument, if check out success, record a line on the history in this form: true, name, instrumentID, studentID, checked in date (with the status of instrument changed)
     * and also change the instrument's status, and change the student ID
     * @param instrumentID the ID of the instrument that student wants to check out
     * @param studentID the ID of the student who wants to check out instrument
     */
    public Instrument[] checkOut(int instrumentID, int studentID){
        //load everything in the file into an instrument list containing instrument objects
        Instrument instrumentList[] = Utilities.loadInstrumentFile(missingFileMessage);
        for(int i = 0; i< instrumentList.length;i++){
            if(instrumentList[i].getNumber() == instrumentID){
                //when the instrument is checked out currently
                if(instrumentList[i].getStatus()){
                    //check if it is the same student trying to check out the same instrument, if it is, tell them they have already checked out the instrument
                    if(instrumentList[i].getStudentID() == studentID){
                        //print prompt
                        statusMessage.setForeground(Color.RED);
                        statusMessage.setText("Item is already checked out.");
                        missingFileMessage.setText(" ");
                        //return becuase nothing is checked out and nothing need to be changed
                        return instrumentList;
                    }
                    
                    //the student is attemping to check out an instrument that is checked out by another student, check in for the previous student and check out for the current student
                    else{
                        
                        //check in for the previous student
                        //change instrument to checked in status
                        instrumentList[i].setStatus(false);
                        //get the date(system time), change the date
                        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");  
                        Date date = new Date();  
                        instrumentList[i].setDate(formatter.format(date));
                        //record this into the history file
                        Utilities.writeToHistory(instrumentList[i].toString());
                        
                        
                        //check out for the current student
                        //change the status to checked out
                        instrumentList[i].setStatus(true);
                        //change the student ID
                        instrumentList[i].setStudentID(studentID);
                        //add record to history
                        Utilities.writeToHistory(instrumentList[i].toString());
                        //print promt
                        statusMessage.setForeground(Color.GREEN);
                        statusMessage.setText("Sucessfully checked out: " + instrumentList[i].getName());
                        missingFileMessage.setText(" ");
                        //return after checking out the instrument with the information changed
                        return instrumentList;
                    }
                }
                
                //when the instrument is checked in currently, just check the instrument out
                else{
                    //get the date(system time), change the date
                    SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");  
                    Date date = new Date();  
                    //change the date
                    instrumentList[i].setDate(formatter.format(date));
                    //change the status to checked out
                    instrumentList[i].setStatus(true);
                    //change the student ID
                    instrumentList[i].setStudentID(studentID);
                    //add record to history
                    Utilities.writeToHistory(instrumentList[i].toString());
                    //print success message
                    statusMessage.setForeground(Color.GREEN);
                    statusMessage.setText("Sucessfully checked out: " + instrumentList[i].getName());
                    missingFileMessage.setText(" ");
                    //return the list with the instrument checked out
                    return instrumentList;
                }
            }
        }
        //if it didn't even make it in the for loop, the list have nothing, then just return it
        statusMessage.setForeground(Color.RED);
        statusMessage.setText("No instrument with this ID exists");
        return instrumentList;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkInButton;
    private javax.swing.JButton checkOutButton;
    private javax.swing.JTextField equipmentIDField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel missingFileMessage;
    private javax.swing.JLabel statusMessage;
    private javax.swing.JTextField studentID;
    private javax.swing.JButton teachLoginButton;
    // End of variables declaration//GEN-END:variables
}

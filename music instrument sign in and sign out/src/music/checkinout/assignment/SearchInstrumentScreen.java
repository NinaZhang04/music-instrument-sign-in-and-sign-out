
/*
 * Author: Core Inc (Kyle, Helen, Nina)
 * Class: ICS4U
 * Program: Search instrument/student screen
 * Description: Searches and displays specific instruments and students
 */
package music.checkinout.assignment;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author healt
 */
public class SearchInstrumentScreen extends javax.swing.JPanel {

    /**
     * Creates new form SearchInstrumentScreen
     */
    public SearchInstrumentScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        IDField = new javax.swing.JTextField();
        enterButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        errorMessage = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        enterButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(18, 69, 89));
        setForeground(new java.awt.Color(18, 69, 89));
        setMaximumSize(new java.awt.Dimension(1920, 1080));

        jPanel1.setBackground(new java.awt.Color(239, 246, 224));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 50)); // NOI18N
        jLabel2.setText("Search Instrument/Student");

        IDField.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        IDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDFieldActionPerformed(evt);
            }
        });

        enterButton.setBackground(new java.awt.Color(18, 69, 89));
        enterButton.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        enterButton.setForeground(new java.awt.Color(250, 250, 250));
        enterButton.setText("Instrument");
        enterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel3.setText("Instrument/Student ID:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel4.setText("Search Results: ");

        errorMessage.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N

        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        enterButton1.setBackground(new java.awt.Color(18, 69, 89));
        enterButton1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        enterButton1.setForeground(new java.awt.Color(250, 250, 250));
        enterButton1.setText("Student ");
        enterButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterButton1ActionPerformed(evt);
            }
        });

        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1628, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(834, 834, 834))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1628, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(errorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 815, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(IDField, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(enterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(enterButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IDField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enterButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(errorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1720, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void enterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterButtonActionPerformed
        // TODO add your handling code here:
       // initialize instrumentID
        int instrumentID = -1;
        // get the instrument id for the instrument they're looking for
        // try catch block to prevent breaking if a string is inputted
        try {
            instrumentID = Integer.parseInt(IDField.getText());
        } catch (NumberFormatException exception) {
            // Output expected NumberFormatException.
            // prints an error message if there's a problem
            jTextArea2.setText("Make sure to enter a valid ID!");
            return;
        }
        // calls methods to print the instrument info and the instrument history, passing through the ID
        printInstrument(instrumentID);
        printInstrumentHistory(instrumentID);
    }//GEN-LAST:event_enterButtonActionPerformed

    private void IDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDFieldActionPerformed

    private void enterButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterButton1ActionPerformed
        // TODO add your handling code here:
        // declares vairable to store the studentID to search for
        int studentID = -1;
        // try catch block to catch errors if the ID is not numeric
        try {
            studentID = Integer.parseInt(IDField.getText());
        } catch (NumberFormatException exception) {
            // Output expected NumberFormatException.
            // prints error message if ti's not a number
            jTextArea2.setText("Make sure to enter a valid ID!");
            return;
        }
        
        // calls searchStudent and assigns array returned to temp
        ArrayList temp = searchStudent(studentID);
        // creates a string to store the print message for instruments the student has signed out
        String print = "Instruments checked out: ";
        // for loop to print out all the instruments the student has checked out
        for(int i = 0; i < temp.size()-1; i++){
            // concatenates each instrument they have (the ID)
            print = print + temp.get(i) + ", ";
        }
        if(temp.size() > 0){
            // adds the last element
            print = print + temp.get(temp.size()-1);
        }
        else {
            // if the size is 0, then they have no instruments checked out
            print = "No instruments checked out";
        }
        // sets the text area to the message to print (either the list or that they have none checked out)
        jTextArea2.setText(print);
        // calls method to print the history of the student
        printStudentHistory(studentID);
    }//GEN-LAST:event_enterButton1ActionPerformed

    /**
     * private method (only accessed in this class) to print the instrument info
     * @param id - the instrument ID for the instrument to print
     */
    private void printInstrument(int id){
        // declares scanner to read
        Scanner input = null; 
        // declares file with the instrumnets to be searched
        File inputFile = new File("instrumentList.txt");
        // initializes boolean to track whether the instrument is found
        boolean found = false;
        
        // try catch block that handles file not found exceptions
	try { 
            // initializes the scanner to scan the file 
            input = new Scanner(inputFile);
            // reads all the lines
            while(input.hasNextLine()){
                // creates a temporary array to store the data, split at the delimiter ","
                String temp[] = input.nextLine().split(",");
                
                // checks if the array is the right line to avoid index out of bound
                if(temp.length == 5) {
                    //check if the ID equal to the inputted ID
                    if (Integer.toString(id).equals(temp[2])) {
                        // initializes a string to store the info to print
                        String print = "";
                        // if the checkout status is true
                        if(temp[0].equals("true")){
                            // concatenate the message that it is checked out with the existing string
                            print = print + "Status: checked out \t";
                        }
                        else {
                            // if not checked out, then add that to the string to print
                            print = print + "Status: not checked out \t";
                        }
                        // concatenate all of the info to print
                        print = print + "Instrument: " + temp[1] + "\t ID: " + temp[2] + "\t Student: " + temp[3] + "\t Checkin/out date: " + temp[4];
                        // set the found variable to true
                        found = true;
                        // set the text area to the message to print
                        jTextArea2.setText(print);
                    }
                }
                
            }
                    
        } catch (FileNotFoundException ex) {
            // prints error if the file can't be found
            jTextArea2.setText("Error: The file does not exist, check to make sure it's in the right place!");
        }
        // if the instrument is not found, print the message to inform the user
        if(!found){
            jTextArea2.setText("Instrument not found!");
        }
        // close the scanner
        input.close();
    }
    
    /**
     * private method to print an instruments sign out history
     * @param id - the ID of the instrument to print
     */
    private void printInstrumentHistory(int id) {
        // initialize scanner
        Scanner input = null; 
        // declares file with the data to be worked through
        File inputFile = new File("history.txt");
        
        // creates string to print, includes labels so user can know what info is what
        String print = "Status\tInstrument\tID\tStudent\tCheckin/out Date\n";
        
        // try catch block that handles file not found exceptions
	try { 
            // initializes the scanner to scan the file chosen to be read
            input = new Scanner(inputFile); 
            // reads all the lines
            while(input.hasNextLine()){
                // creates a temporary array to store the data, split at the delimiter ","
                String temp[] = input.nextLine().split(",");
                
                // checks if the array is the right line to avoid index out of bound
                if(temp.length == 5) {
                    //check if the ID equal to the inputted ID
                    if(Integer.toString(id).equals(temp[2])) {
                         // if the checkout status is true
                        if(temp[0].equals("true")){
                            // add that the instrument is checked out
                            print = print + "out\t";
                        }
                        else {
                            // if not checked out, add that it's in
                            print = print + "in\t";
                        }
                        // concatenate the remaining info for that transaction history
                        print = print + temp[1] + "\t" + temp[2] + "\t" + temp[3] + "\t" + temp[4] + "\n";
                    }
                }
                
            }
                    
        } catch (FileNotFoundException ex) {
            // if the file is not found, print an error message
            jTextArea2.setText("Error: The file does not exist, check to make sure it's in the right place!");
        }
        // set the text area to the message to print
        jTextArea3.setText(print);
        // close the scanner
        input.close();
    }
    
    /**
     * private method that returns all of the instruments a student has signed out
     * @param id - the student's ID
     * @return - an arraylist with all of the instrument IDs checked out
     */
    private ArrayList searchStudent(int id){
        // declare scanner
        Scanner input = null; 
        // declares file with the data to be searched through
        File inputFile = new File("instrumentList.txt");
        // initialize an arraylist to return with all integers
        ArrayList instruments = new ArrayList<Integer>();
        
        // try catch block that handles file not found exceptions
	try { 
            // initializes the scanner to scan the file chosen to be read
            input = new Scanner(inputFile); 
            // reads all the lines
            while(input.hasNextLine()){
                // creates a temporary array to store the data, split at the delimiter ","
                String temp[] = input.nextLine().split(",");
                // makes the the length is correct  - avoid index out of bound
                if(temp.length == 5) {
                    int studentID = Integer.parseInt(temp[3]);
                    //check if the ID equal to the inputted ID
                    if (id == studentID) {
                        instruments.add(temp[2]);
                    }
                }
                
            }
                    
        } catch (FileNotFoundException ex) {
            // prints file not found error message
            jTextArea2.setText("Error: The file does not exist, check to make sure it's in the right place!");
        }
        
        // returns the arrayList
        return instruments;
    }
    
    /**
     * method that prints the students sign out history
     * @param id - the student ID to print it's history
     */
    private void printStudentHistory(int id) {
        // declare scanner
        Scanner input = null; 
        // declares file with the data to be searched through
        File inputFile = new File("history.txt");
        
        // creates string to print, includes labels so user can know what info is what
        String print = "Status\tInstrument\tID\tStudent\tCheckin/out Date\n";
        
        // try catch block that handles file not found exceptions
	try { 
            // initializes the scanner to scan the file chosen to be read - ghgemissions.csv
            input = new Scanner(inputFile); 
            // reads all the lines
            while(input.hasNextLine()){
                // creates a temporary array to store the data, split at the delimiter ","
                String temp[] = input.nextLine().split(",");
                
                // checks if the array is the right line to avoid index out of bound
                if(temp.length == 5) {
                    //check if the ID equal to the inputted ID
                    if(id == Integer.parseInt(temp[3])) {
                         // if the checkout status is true
                        if(temp[0].equals("true")){
                            // add that the instrument is checked out
                            print = print + "out\t";
                        }
                        else {
                            // if not checked out, add that it's in
                            print = print + "in\t";
                        }
                        // concatenate the remaining info for that transaction history
                        print = print + temp[1] + "\t" + temp[2] + "\t" + temp[3] + "\t" + temp[4] + "\n";
                    }
                }
                
            }
                    
        } catch (FileNotFoundException ex) {
            // prints file not found error
            jTextArea2.setText("Error: The file does not exist, check to make sure it's in the right place!");
        }
        // sets the text area to the message to print
        jTextArea3.setText(print);
        // closes the scanner
        input.close();
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IDField;
    private javax.swing.JButton enterButton;
    private javax.swing.JButton enterButton1;
    private javax.swing.JLabel errorMessage;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    // End of variables declaration//GEN-END:variables
}
